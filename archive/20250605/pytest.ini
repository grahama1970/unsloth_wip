[pytest]
# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test reporting
addopts = 
    -v
    --strict-markers
    --tb=short
    --disable-warnings
    --json-report
    --json-report-file=docs/reports/test_report.json
    --html=docs/reports/test_report.html
    --self-contained-html
    --cov=src/unsloth
    --cov-report=html:docs/reports/coverage
    --cov-report=term-missing
    --cov-fail-under=0
    --timeout=300
    --timeout-method=thread

# Test markers
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (may use external services)
    e2e: End-to-end tests (full workflow)
    smoke: Smoke tests (quick sanity checks)
    performance: Performance tests (benchmarks)
    slow: Tests that take > 5 seconds
    gpu: Tests that require GPU
    runpod: Tests that require RunPod
    skip_ci: Skip in CI environment

# Warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::ResourceWarning
    ignore:.*unclosed.*:ResourceWarning

# Logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Test collection
norecursedirs = .git .tox dist build *.egg __pycache__ scratch archive repos outputs output lora_model
collect_ignore = ['setup.py', 'conftest.py']

# Asyncio
asyncio_mode = auto

# Coverage
[coverage:run]
source = src/unsloth
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */.venv/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod